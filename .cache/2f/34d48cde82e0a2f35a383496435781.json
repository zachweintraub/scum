{"id":"../node_modules/apollo-reporting-protobuf/dist/index.js","dependencies":[{"name":"/Users/helpfulhuman/Desktop/HH/scum/package.json","includedInParent":true,"mtime":1608403050000},{"name":"/Users/helpfulhuman/Desktop/HH/scum/node_modules/apollo-reporting-protobuf/package.json","includedInParent":true,"mtime":1606702562000},{"name":"./protobuf","loc":{"line":1,"column":25},"parent":"/Users/helpfulhuman/Desktop/HH/scum/node_modules/apollo-reporting-protobuf/dist/index.js","resolved":"/Users/helpfulhuman/Desktop/HH/scum/node_modules/apollo-reporting-protobuf/dist/protobuf.js"},{"name":"@apollo/protobufjs/minimal","loc":{"line":2,"column":27},"parent":"/Users/helpfulhuman/Desktop/HH/scum/node_modules/apollo-reporting-protobuf/dist/index.js","resolved":"/Users/helpfulhuman/Desktop/HH/scum/node_modules/@apollo/protobufjs/minimal.js"}],"generated":{"js":"const protobuf = require('./protobuf');\nconst protobufJS = require('@apollo/protobufjs/minimal');\n\n// Remove Long support.  Our uint64s tend to be small (less\n// than 104 days).\n// https://github.com/protobufjs/protobuf.js/issues/1253\nprotobufJS.util.Long = undefined;\nprotobufJS.configure();\n\n// Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\nconst originalTracesAndStatsEncode = protobuf.TracesAndStats.encode;\nprotobuf.TracesAndStats.encode = function(message, originalWriter) {\n  const writer = originalTracesAndStatsEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(/* id 1, wireType 2 =*/ 10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n  return writer;\n};\n\nmodule.exports = protobuf;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/apollo-reporting-protobuf/dist/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../node_modules/apollo-reporting-protobuf/dist/index.js":"const protobuf = require('./protobuf');\nconst protobufJS = require('@apollo/protobufjs/minimal');\n\n// Remove Long support.  Our uint64s tend to be small (less\n// than 104 days).\n// https://github.com/protobufjs/protobuf.js/issues/1253\nprotobufJS.util.Long = undefined;\nprotobufJS.configure();\n\n// Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\nconst originalTracesAndStatsEncode = protobuf.TracesAndStats.encode;\nprotobuf.TracesAndStats.encode = function(message, originalWriter) {\n  const writer = originalTracesAndStatsEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(/* id 1, wireType 2 =*/ 10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n  return writer;\n};\n\nmodule.exports = protobuf;\n"},"lineCount":32}},"error":null,"hash":"1a1d82173066819f5cbb9de95b0477ca","cacheData":{"env":{}}}